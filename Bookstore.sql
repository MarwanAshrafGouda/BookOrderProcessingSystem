CREATE SCHEMA IF NOT EXISTS BOOKSTORE;

USE BOOKSTORE;

CREATE TABLE IF NOT EXISTS PUBLISHER (
    Name VARCHAR(50) UNIQUE NOT NULL PRIMARY KEY,
    Address VARCHAR(100),
    Phone_Number VARCHAR(20) UNIQUE
);

CREATE TABLE IF NOT EXISTS BOOK (
    ISBN INT UNIQUE NOT NULL PRIMARY KEY,
    Title VARCHAR(100) UNIQUE NOT NULL,
    Publisher_Name VARCHAR(50) NOT NULL,
    Category VARCHAR(10) NOT NULL,
    Selling_Price DECIMAL(6 , 2 ) NOT NULL,
    Publication_Year YEAR NOT NULL,
    No_of_Copies INT DEFAULT 0,
    Threshold INT NOT NULL DEFAULT 0,
    FOREIGN KEY (Publisher_Name)
        REFERENCES PUBLISHER (Name),
    CHECK (Category = 'Science' OR 'Art'
        OR 'Religion'
        OR 'History'
        OR 'Geography')
);

CREATE TABLE IF NOT EXISTS AUTHOR (
    Name VARCHAR(50) UNIQUE NOT NULL,
    ISBN INT UNIQUE NOT NULL,
    FOREIGN KEY (ISBN)
        REFERENCES BOOK (ISBN),
    PRIMARY KEY (Name , ISBN)
);

CREATE TABLE IF NOT EXISTS BOOK_ORDER (
    Order_No INT AUTO_INCREMENT UNIQUE NOT NULL PRIMARY KEY,
    ISBN INT UNIQUE NOT NULL,
    Quantity INT NOT NULL DEFAULT 100,
    FOREIGN KEY (ISBN)
        REFERENCES BOOK (ISBN)
);

CREATE TABLE IF NOT EXISTS CUSTOMER (
    User_Name VARCHAR(25) UNIQUE NOT NULL PRIMARY KEY,
    Password VARCHAR(16) UNIQUE NOT NULL,
    First_Name VARCHAR(25) NOT NULL,
    Last_Name VARCHAR(25) NOT NULL,
    Email_Address VARCHAR(100) UNIQUE NOT NULL,
    Phone_Number VARCHAR(20) UNIQUE,
    Shipping_Address VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS MANAGER (
    User_Name VARCHAR(25) UNIQUE NOT NULL PRIMARY KEY,
    FOREIGN KEY (User_Name)
        REFERENCES CUSTOMER (User_Name)
);

CREATE TABLE IF NOT EXISTS SHOPPING_CART (
    User_Name VARCHAR(25) UNIQUE NOT NULL,
    ISBN INT UNIQUE NOT NULL,
    No_of_Copies INT DEFAULT 1,
    PRIMARY KEY (User_Name , ISBN),
    FOREIGN KEY (User_Name)
        REFERENCES CUSTOMER (User_Name),
    FOREIGN KEY (ISBN)
        REFERENCES BOOK (ISBN)
);

CREATE TABLE IF NOT EXISTS SALE (
    Sale_ID INT AUTO_INCREMENT UNIQUE NOT NULL PRIMARY KEY,
    User_Name VARCHAR(25) UNIQUE NOT NULL,
    ISBN INT UNIQUE NOT NULL,
    No_of_Copies INT DEFAULT 1,
    Date DATE NOT NULL,
    FOREIGN KEY (User_Name)
        REFERENCES CUSTOMER (User_Name),
    FOREIGN KEY (ISBN)
        REFERENCES BOOK (ISBN)
);

CREATE INDEX ISBN_Index
ON BOOK (ISBN);

CREATE INDEX Title_Index
ON BOOK (Title);

CREATE INDEX Category_Index
ON BOOK (Category);

DELIMITER $$
CREATE 
    TRIGGER  Confirm_Order
 BEFORE DELETE ON BOOK_ORDER FOR EACH ROW 
    BEGIN 
		UPDATE BOOK 
		SET 
			No_of_Copies = No_of_Copies + OLD.Quantity
		WHERE
			ISBN = OLD.ISBN;
    END$$
DELIMITER ; 


DELIMITER $$
CREATE 
    TRIGGER Place_Order
 AFTER UPDATE ON BOOK FOR EACH ROW
    BEGIN 
		INSERT INTO BOOK_ORDER (ISBN) 
		SELECT 
			ISBN
		FROM
			BOOK
		WHERE
			ISBN = OLD.ISBN
				AND OLD.No_of_Copies >= Threshold
				AND No_of_Copies < Threshold; 
    END$$
DELIMITER ;

INSERT INTO PUBLISHER VALUES ('Publisher', NULL, NULL);
INSERT INTO BOOK VALUES (123456789, 'Harry Potter', 'Publisher', 'Science', 12, 1999, 15, 9);
SELECT * FROM BOOK;
SELECT * FROM BOOK_ORDER;

UPDATE BOOK SET No_of_Copies = 100 WHERE ISBN = 123456789;
UPDATE BOOK SET No_of_Copies = 100 WHERE ISBN = 123456788;
UPDATE BOOK SET No_of_Copies = 100 WHERE ISBN = 123456780;
DELETE FROM BOOK_ORDER;
INSERT INTO BOOK VALUES (123456788, 'Harry Potter 2', 'Publisher', 'Science', 12, 1999, 15, 9);
INSERT INTO BOOK VALUES (123456780, 'Harry Potter 3', 'Publisher', 'Science', 12, 1999, 15, 9);

DELETE FROM BOOK_ORDER WHERE Order_No = 3;
INSERT INTO BOOK_ORDER (ISBN) VALUES (123456780);
UPDATE BOOK SET Title = 'Harry Potter 4' WHERE ISBN = 123456788;
DELETE FROM BOOK_ORDER WHERE Order_No = 2;

DROP TRIGGER Confirm_Order;
DROP TRIGGER Place_Order;


